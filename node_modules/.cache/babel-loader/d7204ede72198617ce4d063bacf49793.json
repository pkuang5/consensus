{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar ProgressBar = function (_a) {\n  var bgColor = _a.bgColor,\n      completed = _a.completed,\n      baseBgColor = _a.baseBgColor,\n      height = _a.height,\n      width = _a.width,\n      margin = _a.margin,\n      padding = _a.padding,\n      borderRadius = _a.borderRadius,\n      labelAlignment = _a.labelAlignment,\n      labelColor = _a.labelColor,\n      labelSize = _a.labelSize,\n      isLabelVisible = _a.isLabelVisible,\n      transitionDuration = _a.transitionDuration,\n      transitionTimingFunction = _a.transitionTimingFunction,\n      className = _a.className;\n\n  var getAlignment = function (alignmentOption) {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  var alignment = getAlignment(labelAlignment);\n  var containerStyles = {\n    height: height,\n    backgroundColor: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin\n  };\n  var fillerStyles = {\n    height: height,\n    width: Number(completed) > 100 ? \"100%\" : Number(completed) + \"%\",\n    backgroundColor: bgColor,\n    transition: \"width \" + (transitionDuration || \"1s\") + \" \" + (transitionTimingFunction || \"ease-in-out\"),\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: labelAlignment !== \"outside\" && alignment ? alignment : \"normal\"\n  };\n  var labelStyles = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\"\n  };\n  var outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\"\n  };\n  return React.createElement(\"div\", {\n    style: outsideStyles,\n    className: className\n  }, React.createElement(\"div\", {\n    style: containerStyles\n  }, React.createElement(\"div\", {\n    style: fillerStyles\n  }, labelAlignment !== \"outside\" && React.createElement(\"span\", {\n    style: labelStyles\n  }, typeof completed === \"number\" ? completed + \"%\" : \"\" + completed))), labelAlignment === \"outside\" && React.createElement(\"span\", {\n    style: labelStyles\n  }, typeof completed === \"number\" ? completed + \"%\" : \"\" + completed));\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string\n};\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true\n};\nexports.default = ProgressBar;","map":{"version":3,"sources":["../src/index.tsx"],"names":["React.createElement","PropTypes.oneOfType","PropTypes.string","PropTypes.number","PropTypes.oneOf","PropTypes.bool"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nexport type ProgressBarProps = {\n  completed: string | number;\n  bgColor?: string;\n  baseBgColor?: string;\n  height?: string;\n  width?: string;\n  borderRadius?: string;\n  margin?: string;\n  padding?: string;\n  labelAlignment?: \"left\" | \"center\" | \"right\" | \"outside\";\n  labelColor?: string;\n  labelSize?: string;\n  isLabelVisible?: boolean;\n  transitionDuration?: string;\n  transitionTimingFunction?:\n    | \"ease\"\n    | \"linear\"\n    | \"ease-in\"\n    | \"ease-out\"\n    | \"ease-in-out\";\n  className?: string;\n};\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({\n  bgColor,\n  completed,\n  baseBgColor,\n  height,\n  width,\n  margin,\n  padding,\n  borderRadius,\n  labelAlignment,\n  labelColor,\n  labelSize,\n  isLabelVisible,\n  transitionDuration,\n  transitionTimingFunction,\n  className,\n}) => {\n  const getAlignment = (\n    alignmentOption: ProgressBarProps[\"labelAlignment\"]\n  ) => {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  const alignment = getAlignment(labelAlignment);\n\n  const containerStyles: React.CSSProperties = {\n    height: height,\n    backgroundColor: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin,\n  };\n\n  const fillerStyles: React.CSSProperties = {\n    height: height,\n    width: Number(completed) > 100 ? `100%` : `${Number(completed)}%`,\n    backgroundColor: bgColor,\n    transition: `width ${transitionDuration || \"1s\"} ${\n      transitionTimingFunction || \"ease-in-out\"\n    }`,\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent:\n      labelAlignment !== \"outside\" && alignment ? alignment : \"normal\",\n  };\n\n  const labelStyles: React.CSSProperties = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\",\n  };\n\n  const outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\",\n  };\n\n  return (\n    <div style={outsideStyles} className={className}>\n      <div style={containerStyles}>\n        <div style={fillerStyles}>\n          {labelAlignment !== \"outside\" && (\n            <span style={labelStyles}>\n              {typeof completed === \"number\" ? `${completed}%` : `${completed}`}\n            </span>\n          )}\n        </div>\n      </div>\n      {labelAlignment === \"outside\" && (\n        <span style={labelStyles}>\n          {typeof completed === \"number\" ? `${completed}%` : `${completed}`}\n        </span>\n      )}\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"script"}